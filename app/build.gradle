plugins {
    id 'com.android.application'
}

def arcore_libpath = "${buildDir}/arcore-native"

configurations { natives }

android {
    compileSdkVersion 32
    ndkVersion '21.4.7075529'
//    '21.4.7075529'

    defaultConfig {
        applicationId = 'com.example.native_activity'
        minSdk 28
        targetSdkVersion 32
        ndk {
            abiFilters  "arm64-v8a"
        }
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17", "-Wall"
                arguments "-DANDROID_STL=c++_static",
                        "-DARCORE_LIBPATH=${arcore_libpath}/jni",
                        "-DARCORE_INCLUDE=/home/madhuparna/AndroidStudioProjects/illixr-native-activity/arcore-android-sdk/libraries/include",
                        "-DGLM_INCLUDE=/home/madhuparna/AndroidStudioProjects/illixr-native-activity/arcore-android-sdk/third_party/glm"
//                        "-DGLM_INCLUDE=${project.rootDir}/arcore-android-sdk/third_party/glm"

            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            version '3.18.1'
            path 'src/main/cpp/CMakeLists.txt'

        }
    }
}



dependencies {
    // ARCore (Google Play Services for AR) library.
    implementation 'com.google.ar:core:1.36.0'
    natives 'com.google.ar:core:1.36.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}

// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibraries() {
    // Always extract, this insures the native libs are updated if the version changes.
    outputs.upToDateWhen { false }
    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into arcore_libpath
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded {
    task -> if ((task.name.contains("external") || task.name.contains("CMake")) && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}